{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 活性化関数の表示の課題"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 活性化関数を関数で定義\n",
    "def sigmoid(x) :\n",
    "    return 1 / (1 + np.exp(-x))\n",
    "\n",
    "def softmax(x) :\n",
    "    expx = np.exp(x)\n",
    "    sum_expx = np.sum(expx)\n",
    "    return expx / sum_expx\n",
    "\n",
    "def tanh(x) :\n",
    "    exp_Px = np.exp(x)\n",
    "    exp_Nx = np.exp(-x)\n",
    "    return (exp_Px - exp_Nx) / (exp_Px + exp_Nx)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "x = np.arange(-5.0, 5.0, 0.1)\n",
    "\n",
    "sigmoid_y = sigmoid(x)\n",
    "softmax_y = softmax(x)\n",
    "tanh_y = tanh(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(x, sigmoid_y, label='sigmoid', color='blue')\n",
    "plt.plot(x, softmax_y, label='softmax', color='red')\n",
    "plt.plot(x, tanh_y, label='tanh', color='green')\n",
    "\n",
    "plt.grid()\n",
    "plt.legend()\n",
    "plt.ylim(-1.2, 1.2)\n",
    "plt.title('Activation function')\n",
    "plt.xlabel('input')\n",
    "plt.ylabel('output')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "# トライフォース作成課題"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "import cv2\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 背景を幅440、高さ440の黒画像を作成\n",
    "img = np.zeros((440, 440, 3), np.uint8)\n",
    "\n",
    "# 黄色の三角形を作成\n",
    "points1 = np.array([[440/2, 440/4], \n",
    "                    [440*3/4, 440*3/4], \n",
    "                    [440/4, 440*3/4]], \n",
    "                   dtype=np.int32)\n",
    "cv2.fillConvexPoly(img, points1, (0,255,255))\n",
    "\n",
    "# 黄色の三角形の中の黒い三角形を作成\n",
    "points2 = np.array([[(points1[0][0]+points1[2][0])/2,(points1[0][1]+points1[2][1])/2],\n",
    "                    [(points1[0][0]+points1[1][0])/2,(points1[0][1]+points1[1][1])/2], \n",
    "                    [(points1[1][0]+points1[2][0])/2,(points1[1][1]+points1[2][1])/2]\n",
    "                   ], dtype=np.int32)\n",
    "cv2.fillConvexPoly(img, points2, (0,0,0))\n",
    "\n",
    "cv2.imshow('result', img)\n",
    "cv2.imwrite('./result.png', img)\n",
    "cv2.waitKey(0)\n",
    "cv2.destroyAllWindows()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
